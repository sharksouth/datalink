; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30142.1 

	TITLE	c:\users\sharksouth\onedrive - bupt.edu.cn\学习资料\计算机网络\课程实验\lab1-2022(win+linux)\lab1-windows-vs2019\win32-release\datalink.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CD@DFMNIMLK@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?5windows?5@ ; `string'
PUBLIC	??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0O@FJBKJNGC@Send?5NAK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0DI@KCKLLKOP@Designed?5by?5Jiang?5Yanjun?0?5build@ ; `string'
PUBLIC	??_C@_0BO@BMKHOHKF@?Q?n?J?i?$LK?$KN?5?$LK?z?J?$KF?$LE?$LL?5?$LM?F?M?x?52022?5lab1?6@ ; `string'
PUBLIC	??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@ ; `string'
PUBLIC	??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0O@KMCAAAPA@Recv?5NAK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@ ; `string'
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@
CONST	SEGMENT
??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@ DB '---- DATA %d tim'
	DB	'eout', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ DB 'Recv DATA'
	DB	' %d %d, ID %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KMCAAAPA@Recv?5NAK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@KMCAAAPA@Recv?5NAK?5?5?$CFd?6@ DB 'Recv NAK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@ DB 'Recv ACK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@
CONST	SEGMENT
??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@ DB '*'
	DB	'*** Receiver Error, Bad CRC Checksum', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMKHOHKF@?Q?n?J?i?$LK?$KN?5?$LK?z?J?$KF?$LE?$LL?5?$LM?F?M?x?52022?5lab1?6@
CONST	SEGMENT
??_C@_0BO@BMKHOHKF@?Q?n?J?i?$LK?$KN?5?$LK?z?J?$KF?$LE?$LL?5?$LM?F?M?x?52022?5lab1?6@ DB 0d1H
	DB	0eeH, 0caH, 0e9H, 0baH, 0adH, ' ', 0baH, 0faH, 0caH, 0a5H, 0b4H
	DB	0bbH, ' ', 0bcH, 0c6H, 0cdH, 0f8H, ' 2022 lab1', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@KCKLLKOP@Designed?5by?5Jiang?5Yanjun?0?5build@
CONST	SEGMENT
??_C@_0DI@KCKLLKOP@Designed?5by?5Jiang?5Yanjun?0?5build@ DB 'Designed by '
	DB	'Jiang Yanjun, build: May 16 2022  11:56:02', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJBKJNGC@Send?5NAK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@FJBKJNGC@Send?5NAK?5?5?$CFd?6@ DB 'Send NAK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@ DB 'Send ACK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DFMNIMLK@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?5windows?5@
CONST	SEGMENT
??_C@_0CD@DFMNIMLK@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?5windows?5@ DB 'S'
	DB	'end DATA %d %d, ID %d windows %d', 0aH, 00H	; `string'
PUBLIC	_main
PUBLIC	_f_between
_ack_expected DB 01H DUP (?)
	ALIGN	4

_frame_expected DB 01H DUP (?)
	ALIGN	4

_phl_ready DD	01H DUP (?)
_buffer	DB	01000H DUP (?)
_next_frame DB	01H DUP (?)
	ALIGN	4

_nbuffered DB	01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _f_between
_TEXT	SEGMENT
_c$dead$ = 8						; size = 1
_f_between PROC						; COMDAT
; _a$dead$ = cl
; _b$ = dl

; 27   : 	if (((a <= b) && (b < c)) || ((c < a) && (a <= b)) ||((b < c) && (c < a)))

	mov	cl, BYTE PTR _ack_expected
	mov	al, BYTE PTR _next_frame
	cmp	cl, dl
	ja	SHORT $LN5@f_between
	cmp	dl, al
	jb	SHORT $LN4@f_between
$LN5@f_between:
	cmp	al, cl
	jae	SHORT $LN6@f_between
	cmp	cl, dl
	jbe	SHORT $LN4@f_between
$LN6@f_between:
	cmp	dl, al
	jae	SHORT $LN2@f_between
	cmp	al, cl
	jae	SHORT $LN2@f_between
$LN4@f_between:

; 28   : 		//a:ack_expected,b:f.ack,c:next_frame
; 29   : 		return 1;

	mov	eax, 1

; 32   : }

	ret	0
$LN2@f_between:

; 30   : 	else
; 31   : 		return 0;

	xor	eax, eax

; 32   : }

	ret	0
_f_between ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _put_frame
_TEXT	SEGMENT
_put_frame PROC						; COMDAT
; _frame$ = ecx
; _len$ = edx

; 35   : {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 36   : 	*(unsigned int *)(frame + len) = crc32(frame, len);

	call	_crc32

; 37   : 	send_frame(frame, len + 4);

	lea	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+esi], eax
	mov	ecx, edi
	call	_send_frame

; 38   : 	phl_ready = 0;
; 39   : }

	pop	edi
	mov	DWORD PTR _phl_ready, 0
	pop	esi
	pop	ecx
	ret	0
_put_frame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _send_data_frame
_TEXT	SEGMENT
_s$ = -264						; size = 264
_send_data_frame PROC					; COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH

; 43   : 	struct FRAME s;
; 44   : 
; 45   : 	s.kind = FRAME_DATA;
; 46   : 	s.seq = next_frame;

	mov	al, BYTE PTR _next_frame

; 47   : 	s.ack = (frame_expected+ MAX_SW) % (MAX_SW + 1);
; 48   : 
; 49   : 	memcpy(s.data, buffer[next_frame], PKT_LEN);

	mov	ecx, 64					; 00000040H
	push	ebx
	movzx	ebx, BYTE PTR _frame_expected
	push	esi
	movzx	edx, al
	dec	ebx
	push	edi
	mov	esi, edx
	mov	BYTE PTR _s$[ebp+2], al

; 50   : 	dbg_frame("Send DATA %d %d, ID %d windows %d\n", s.seq, s.ack, *(short *)s.data, nbuffered);

	movzx	eax, BYTE PTR _nbuffered
	lea	edi, DWORD PTR _s$[ebp+3]
	shl	esi, 8
	and	ebx, 15					; 0000000fH
	push	eax
	add	esi, OFFSET _buffer
	mov	BYTE PTR _s$[ebp], 1
	mov	BYTE PTR _s$[ebp+1], bl
	rep movsd
	movsx	eax, WORD PTR _s$[ebp+3]
	push	eax
	push	ebx
	push	edx
	push	OFFSET ??_C@_0CD@DFMNIMLK@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?5windows?5@
	call	_dbg_frame
	add	esp, 20					; 00000014H

; 51   : 	put_frame((unsigned char *)&s, 3 + PKT_LEN);

	lea	ecx, DWORD PTR _s$[ebp]
	mov	edx, 259				; 00000103H
	call	_put_frame

; 52   : 	start_timer(next_frame, DATA_TIMER);

	movzx	ecx, BYTE PTR _next_frame
	call	_start_timer

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_send_data_frame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _send_ack_frame
_TEXT	SEGMENT
_s$ = -264						; size = 264
_send_ack_frame PROC					; COMDAT
; _fe$dead$ = cl

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H

; 57   : 	struct FRAME s;
; 58   : 
; 59   : 	s.kind = FRAME_ACK;
; 60   : 	s.ack = (fe + MAX_SW) % (MAX_SW + 1);

	movzx	eax, BYTE PTR _frame_expected
	dec	eax
	mov	BYTE PTR _s$[ebp], 2
	and	eax, 15					; 0000000fH

; 61   : 
; 62   : 	dbg_frame("Send ACK  %d\n", s.ack);

	push	eax
	push	OFFSET ??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@
	mov	BYTE PTR _s$[ebp+1], al
	call	_dbg_frame
	add	esp, 8

; 63   : 
; 64   : 	put_frame((unsigned char *)&s, 2);

	lea	ecx, DWORD PTR _s$[ebp]
	mov	edx, 2
	call	_put_frame

; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_send_ack_frame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _send_nak_frame
_TEXT	SEGMENT
_s$ = -264						; size = 264
_send_nak_frame PROC					; COMDAT
; _fe$dead$ = cl

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H

; 69   : 	struct FRAME s;
; 70   : 
; 71   : 	s.kind = FRAME_NAK;
; 72   : 	s.ack = (fe + MAX_SW) % (MAX_SW + 1);

	movzx	eax, BYTE PTR _frame_expected
	dec	eax
	mov	BYTE PTR _s$[ebp], 3
	and	eax, 15					; 0000000fH

; 73   : 
; 74   : 	dbg_frame("Send NAK  %d\n", s.ack);

	push	eax
	push	OFFSET ??_C@_0O@FJBKJNGC@Send?5NAK?5?5?$CFd?6@
	mov	BYTE PTR _s$[ebp+1], al
	call	_dbg_frame
	add	esp, 8

; 75   : 
; 76   : 	put_frame((unsigned char *)&s, 2);

	lea	ecx, DWORD PTR _s$[ebp]
	mov	edx, 2
	call	_put_frame

; 77   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_send_nak_frame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\sharksouth\OneDrive - bupt.edu.cn\学习资料\计算机网络\课程实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT _main
_TEXT	SEGMENT
_arg$ = -268						; size = 4
_f$ = -264						; size = 264
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 81   : 	int event, arg;
; 82   : 	struct FRAME f;
; 83   : 	int len = 0;
; 84   : 
; 85   : 	protocol_init(argc, argv);

	mov	edx, DWORD PTR _argv$[ebp]
	sub	esp, 268				; 0000010cH
	mov	ecx, DWORD PTR _argc$[ebp]
	push	ebx
	push	esi
	push	edi
	call	_protocol_init

; 86   : 	lprintf("Designed by Jiang Yanjun, build: " __DATE__ "  "__TIME__"\n");

	push	OFFSET ??_C@_0DI@KCKLLKOP@Designed?5by?5Jiang?5Yanjun?0?5build@
	call	_lprintf
	add	esp, 4

; 87   : 	lprintf("杨书涵 胡圣椿 计网 2022 lab1\n");

	push	OFFSET ??_C@_0BO@BMKHOHKF@?Q?n?J?i?$LK?$KN?5?$LK?z?J?$KF?$LE?$LL?5?$LM?F?M?x?52022?5lab1?6@
	call	_lprintf
	add	esp, 4

; 88   : 
; 89   : 	disable_network_layer();

	call	_disable_network_layer

; 90   : 	int nak_ = 1;

	mov	edi, 1
	npad	2
$LL2@main:

; 91   : 	for (;;)
; 92   : 	{
; 93   : 		event = wait_for_event(&arg);

	lea	ecx, DWORD PTR _arg$[esp+280]
	call	_wait_for_event

; 94   : 		
; 95   : 
; 96   : 		switch (event) {

	cmp	eax, 4
	ja	$LN59@main
	jmp	DWORD PTR $LN57@main[eax*4]
$LN15@main:

; 97   : 		case NETWORK_LAYER_READY:
; 98   : 			get_packet(buffer[next_frame]);

	movzx	ecx, BYTE PTR _next_frame
	shl	ecx, 8
	add	ecx, OFFSET _buffer
	call	_get_packet

; 99   : 			nbuffered++;

	inc	BYTE PTR _nbuffered

; 100  : 			send_data_frame();

	call	_send_data_frame

; 101  : 
; 102  : 			if (next_frame < MAX_SW) //

	mov	al, BYTE PTR _next_frame
	cmp	al, 15					; 0000000fH
	jae	SHORT $LN16@main

; 103  : 				next_frame++;

	inc	al

; 106  : 
; 107  : 			break;

	mov	BYTE PTR _next_frame, al
	jmp	$LN59@main
$LN16@main:

; 104  : 			else
; 105  : 				next_frame = 0;

	xor	al, al

; 106  : 
; 107  : 			break;

	mov	BYTE PTR _next_frame, al
	jmp	$LN59@main
$LN18@main:

; 108  : 
; 109  : 		case PHYSICAL_LAYER_READY:
; 110  : 			phl_ready = 1;

	mov	DWORD PTR _phl_ready, 1

; 111  : 			break;

	jmp	$LN59@main
$LN19@main:

; 112  : 
; 113  : 		case FRAME_RECEIVED:
; 114  : 			len = recv_frame((unsigned char *)&f, sizeof f);

	lea	ecx, DWORD PTR _f$[esp+280]
	call	_recv_frame
	mov	esi, eax

; 115  : 
; 116  : 			if (len < 5 || crc32((unsigned char *)&f, len) != 0) {

	cmp	esi, 5
	jl	$LN21@main
	mov	edx, esi
	lea	ecx, DWORD PTR _f$[esp+280]
	call	_crc32
	test	eax, eax
	jne	$LN21@main

; 125  : 			}
; 126  : 
; 127  : 			if (f.kind == FRAME_ACK) //收到ack 不用操作

	mov	dh, BYTE PTR _f$[esp+280]
	mov	bh, BYTE PTR _f$[esp+281]
	cmp	dh, 2
	jne	SHORT $LN23@main

; 128  : 				dbg_frame("Recv ACK  %d\n", f.ack);

	movzx	eax, bh
	push	eax
	push	OFFSET ??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@
	call	_dbg_frame
	add	esp, 8

; 129  : 
; 130  : 			if (f.kind == FRAME_NAK) //收到nak 重传对应帧

	jmp	$LN62@main
$LN23@main:
	cmp	dh, 3
	jne	SHORT $LN24@main

; 131  : 				dbg_frame("Recv NAK  %d\n", f.ack);

	movzx	eax, bh
	push	eax
	push	OFFSET ??_C@_0O@KMCAAAPA@Recv?5NAK?5?5?$CFd?6@
	call	_dbg_frame
	add	esp, 8

; 132  : 
; 133  : 			if (f.kind == FRAME_DATA) //收到数据 判断是不是所期望的 是：开始ack并传输 不是：发送nak

	jmp	SHORT $LN62@main
$LN24@main:
	cmp	dh, 1
	jne	SHORT $LN44@main

; 134  : 			{
; 135  : 				dbg_frame("Recv DATA %d %d, ID %d\n", f.seq, f.ack, *(short*)f.data);

	movsx	eax, WORD PTR _f$[esp+283]
	mov	bl, BYTE PTR _f$[esp+282]
	push	eax
	movzx	eax, bh
	push	eax
	movzx	eax, bl
	push	eax
	push	OFFSET ??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
	call	_dbg_frame
	add	esp, 16					; 00000010H

; 136  : 				if (f.seq == frame_expected)

	cmp	bl, BYTE PTR _frame_expected
	jne	SHORT $LN26@main

; 137  : 				{
; 138  : 					put_packet(f.data, len - 7);

	lea	edx, DWORD PTR [esi-7]
	lea	ecx, DWORD PTR _f$[esp+283]
	call	_put_packet

; 139  : 					nak_ = 1;
; 140  : 
; 141  : 					if (frame_expected < MAX_SW) //

	mov	al, BYTE PTR _frame_expected
	mov	edi, 1
	cmp	al, 15					; 0000000fH
	jae	SHORT $LN28@main

; 142  : 						frame_expected++;

	inc	al

; 145  : 
; 146  : 					start_ack_timer(ACK_TIMER);

	mov	BYTE PTR _frame_expected, al
	call	_start_ack_timer

; 147  : 				}

	jmp	SHORT $LN62@main
$LN28@main:

; 143  : 					else
; 144  : 						frame_expected = 0;

	xor	al, al

; 145  : 
; 146  : 					start_ack_timer(ACK_TIMER);

	mov	BYTE PTR _frame_expected, al
	call	_start_ack_timer

; 147  : 				}

	jmp	SHORT $LN62@main
$LN26@main:

; 148  : 				else if (nak_)

	test	edi, edi
	je	SHORT $LN62@main

; 149  : 				{
; 150  : 					send_nak_frame(frame_expected);

	call	_send_nak_frame

; 151  : 					nak_ = 0;

	xor	edi, edi

; 152  : 					stop_ack_timer();

	call	_stop_ack_timer
$LN62@main:

; 153  : 				}
; 154  : 			}
; 155  : 
; 156  : 			while (f_between(ack_expected, f.ack, next_frame)) 

	mov	dh, BYTE PTR _f$[esp+280]
$LN44@main:
	push	ecx
	mov	dl, bh
	call	_f_between
	mov	bl, BYTE PTR _ack_expected
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@main
	npad	10
$LL7@main:

; 157  : 			{
; 158  : 				nbuffered = nbuffered - 1;

	dec	BYTE PTR _nbuffered

; 159  : 				stop_timer(ack_expected);

	movzx	ecx, bl
	call	_stop_timer

; 160  : 
; 161  : 				if (ack_expected < MAX_SW) //

	cmp	bl, 15					; 0000000fH
	jae	SHORT $LN31@main

; 162  : 					ack_expected++;

	inc	bl
	jmp	SHORT $LN32@main
$LN31@main:

; 163  : 				else
; 164  : 					ack_expected = 0;

	xor	bl, bl
$LN32@main:

; 153  : 				}
; 154  : 			}
; 155  : 
; 156  : 			while (f_between(ack_expected, f.ack, next_frame)) 

	push	ecx
	mov	dl, bh
	mov	BYTE PTR _ack_expected, bl
	call	_f_between
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL7@main
$LN8@main:

; 165  : 			}
; 166  : 			if (f.kind == FRAME_NAK) //重传开始

	cmp	dh, 3
	jne	$LN59@main

; 167  : 			{
; 168  : 				stop_timer(ack_expected + 1);

	movzx	ecx, bl
	inc	ecx
	call	_stop_timer

; 169  : 				next_frame = ack_expected;
; 170  : 				for (int i = 0; i < nbuffered; i++) 

	xor	esi, esi
	mov	BYTE PTR _next_frame, bl
	cmp	BYTE PTR _nbuffered, 0
	jbe	SHORT $LN10@main
$LL11@main:

; 171  : 				{
; 172  : 					send_data_frame();

	call	_send_data_frame

; 173  : 					start_timer(next_frame, DATA_TIMER);

	movzx	ecx, BYTE PTR _next_frame
	call	_start_timer

; 174  : 					stop_ack_timer();

	call	_stop_ack_timer

; 175  : 
; 176  : 					if (next_frame < MAX_SW) //

	mov	al, BYTE PTR _next_frame
	cmp	al, 15					; 0000000fH
	jae	SHORT $LN34@main

; 177  : 						next_frame++;

	inc	al
	jmp	SHORT $LN9@main
$LN34@main:

; 178  : 					else
; 179  : 						next_frame = 0;

	xor	al, al
$LN9@main:

; 169  : 				next_frame = ack_expected;
; 170  : 				for (int i = 0; i < nbuffered; i++) 

	mov	BYTE PTR _next_frame, al
	inc	esi
	movzx	eax, BYTE PTR _nbuffered
	cmp	esi, eax
	jl	SHORT $LL11@main
$LN10@main:

; 180  : 
; 181  : 				}
; 182  : 				phl_ready = 0;

	mov	DWORD PTR _phl_ready, 0

; 183  : 			}
; 184  : 
; 185  : 			break;

	jmp	$LN59@main
$LN21@main:

; 117  : 				dbg_event("**** Receiver Error, Bad CRC Checksum\n");

	push	OFFSET ??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@
	call	_dbg_event
	add	esp, 4

; 118  : 				if (nak_) 

	test	edi, edi
	je	$LN59@main

; 119  : 				{
; 120  : 					send_nak_frame(frame_expected);

	call	_send_nak_frame

; 121  : 					nak_ = 1;

	mov	edi, 1

; 122  : 					stop_ack_timer();
; 123  : 				}
; 124  : 				break;

	jmp	SHORT $LN63@main
$LN36@main:

; 186  : 
; 187  : 		case DATA_TIMEOUT:
; 188  : 			dbg_event("---- DATA %d timeout\n", arg);

	push	DWORD PTR _arg$[esp+280]
	push	OFFSET ??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@
	call	_dbg_event

; 189  : 			next_frame = ack_expected;

	mov	al, BYTE PTR _ack_expected
	add	esp, 8

; 190  : 			for (int i = 1; i <= nbuffered; i++) 

	cmp	BYTE PTR _nbuffered, 1
	mov	esi, 1
	mov	BYTE PTR _next_frame, al
	jb	SHORT $LN10@main
$LL14@main:

; 191  : 			{
; 192  : 				send_data_frame();

	call	_send_data_frame

; 193  : 				start_timer(next_frame, DATA_TIMER);

	movzx	ecx, BYTE PTR _next_frame
	call	_start_timer

; 194  : 				stop_ack_timer();

	call	_stop_ack_timer

; 195  : 
; 196  : 				if (next_frame < MAX_SW) //

	mov	al, BYTE PTR _next_frame
	cmp	al, 15					; 0000000fH
	jae	SHORT $LN37@main

; 197  : 					next_frame++;

	inc	al
	jmp	SHORT $LN12@main
$LN37@main:

; 198  : 				else
; 199  : 					next_frame = 0;

	xor	al, al
$LN12@main:

; 190  : 			for (int i = 1; i <= nbuffered; i++) 

	mov	BYTE PTR _next_frame, al
	inc	esi
	movzx	eax, BYTE PTR _nbuffered
	cmp	esi, eax
	jle	SHORT $LL14@main

; 200  : 			}
; 201  : 			phl_ready = 0;

	mov	DWORD PTR _phl_ready, 0

; 202  : 			break;

	jmp	SHORT $LN59@main
$LN39@main:

; 203  : 
; 204  : 		case ACK_TIMEOUT:
; 205  : 			send_ack_frame(frame_expected);

	call	_send_ack_frame
$LN63@main:

; 206  : 			stop_ack_timer();
; 207  : 			break;
; 208  : 		}
; 209  : 
; 210  : 		if (nbuffered < MAX_SW && phl_ready)

	call	_stop_ack_timer
$LN59@main:
	cmp	BYTE PTR _nbuffered, 15			; 0000000fH
	jae	SHORT $LN40@main
	cmp	DWORD PTR _phl_ready, 0
	je	SHORT $LN40@main

; 211  : 			enable_network_layer();

	call	_enable_network_layer
	jmp	$LL2@main
$LN40@main:

; 212  : 		else
; 213  : 			disable_network_layer();

	call	_disable_network_layer

; 214  : 	}

	jmp	$LL2@main
	npad	2
$LN57@main:

; 215  : }

	DD	$LN15@main
	DD	$LN18@main
	DD	$LN19@main
	DD	$LN36@main
	DD	$LN39@main
_main	ENDP
_TEXT	ENDS
END
